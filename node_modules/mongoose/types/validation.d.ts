declare module 'mongoose' {

<<<<<<< HEAD
  type SchemaValidator<T, EnforcedDocType, THydratedDocumentType> = RegExp
    | [RegExp, string]
    | Function
    | [Function, string]
    | ValidateOpts<T, THydratedDocumentType>
    | ValidateOpts<T, THydratedDocumentType>[];
=======
  type SchemaValidator<T> = RegExp | [RegExp, string] | Function | [Function, string] | ValidateOpts<T> | ValidateOpts<T>[];
>>>>>>> 3b4aa5cdae276595da8907889ecc433635ccc98d

  interface ValidatorProps {
    path: string;
    fullPath: string;
    value: any;
<<<<<<< HEAD
    reason?: Error;
=======
>>>>>>> 3b4aa5cdae276595da8907889ecc433635ccc98d
  }

  interface ValidatorMessageFn {
    (props: ValidatorProps): string;
  }

<<<<<<< HEAD
  type ValidateFn<T, EnforcedDocType> =
    (this: EnforcedDocType, value: any, props?: ValidatorProps & Record<string, any>) => boolean;

  type AsyncValidateFn<T, EnforcedDocType> =
    (this: EnforcedDocType, value: any, props?: ValidatorProps & Record<string, any>) => Promise<boolean>;

  interface ValidateOpts<T, EnforcedDocType> {
    msg?: string;
    message?: string | ValidatorMessageFn;
    type?: string;
    validator: ValidateFn<T, EnforcedDocType>
    | AsyncValidateFn<T, EnforcedDocType>;
=======
  interface ValidateFn<T> {
    (value: T, props?: ValidatorProps & Record<string, any>): boolean;
  }

  interface LegacyAsyncValidateFn<T> {
    (value: T, done: (result: boolean) => void): void;
  }

  interface AsyncValidateFn<T> {
    (value: T, props?: ValidatorProps & Record<string, any>): Promise<boolean>;
  }

  interface ValidateOpts<T> {
    msg?: string;
    message?: string | ValidatorMessageFn;
    type?: string;
    validator: ValidateFn<T> | LegacyAsyncValidateFn<T> | AsyncValidateFn<T>;
>>>>>>> 3b4aa5cdae276595da8907889ecc433635ccc98d
    propsParameter?: boolean;
  }
}
